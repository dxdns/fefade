---
import { LinkButton, TabItem, Tabs } from "@astrojs/starlight/components"
import { Image } from "astro:assets"
import { Code } from "@astrojs/starlight/components"
import { getTranslations } from "@/i18n"
import { getPath } from "@/i18n"
import type { StarlightIcon } from "@astrojs/starlight/types"
import { capitalizeUtil } from "@fefade/core/utils"

const { buttons } = getTranslations(Astro.currentLocale)
const { data } = Astro.locals.starlightRoute.entry
const { title = data.title, tagline, image } = data.hero || {}

const imageAttrs = {
	loading: "eager" as const,
	decoding: "async" as const,
	width: 400,
	height: 400,
	alt: image?.alt || ""
}

let darkImage: ImageMetadata | undefined
let lightImage: ImageMetadata | undefined
let rawHtml: string | undefined
if (image) {
	if ("file" in image) {
		darkImage = image.file
	} else if ("dark" in image) {
		darkImage = image.dark
		lightImage = image.light
	} else {
		rawHtml = image.html
	}
}

const iconsData: Record<string, StarlightIcon> = {
	react: "seti:react",
	vue: "seti:vue",
	svelte: "seti:svelte"
}
---

<div class="hero">
	{
		darkImage && (
			<Image
				src={darkImage}
				{...imageAttrs}
				class:list={{ "light:sl-hidden": Boolean(lightImage) }}
			/>
		)
	}
	{
		lightImage && (
			<Image src={lightImage} {...imageAttrs} class="dark:sl-hidden" />
		)
	}
	{rawHtml && <div class="hero-html sl-flex" set:html={rawHtml} />}
	<div class="sl-flex stack">
		<div class="sl-flex copy">
			<h1 data-page-title set:html={title} />
			{tagline && <div class="tagline" set:html={tagline} />}
		</div>

		<div class="sl-flex actions">
			<LinkButton
				href={getPath("/installation", Astro.currentLocale)}
				style="max-width: fit-content; height: fit-content; margin: auto;"
			>
				{buttons.startBuilding}
			</LinkButton>

			<div class="tabs">
				<Tabs>
					{
						Object.keys(iconsData).map((item) => (
							<TabItem label={capitalizeUtil(item)} icon={iconsData[item]}>
								<Code
									code={`npm install @fefade/core @fefade/${item}`}
									lang="bash"
									title={capitalizeUtil(item)}
								/>
							</TabItem>
						))
					}
				</Tabs>
			</div>
		</div>
	</div>
</div>

<div class="gradient-background">
	<div class="grid-overlay"></div>
</div>

<style>
	:global([data-theme="light"]) {
		--border-color: rgba(229, 229, 229, 0.4);
		--mask-color-start: rgba(0, 0, 0, 0);
		--mask-color-end: rgba(0, 0, 0, 1);
	}

	:global([data-theme="dark"]) {
		--border-color: rgba(255, 255, 255, 0.03);
		--mask-color-start: rgba(0, 0, 0, 1);
		--mask-color-end: rgba(0, 0, 0, 0);
	}

	:global(.main-frame) {
		position: relative;
	}

	@layer starlight.core {
		.hero {
			display: grid;
			align-items: center;
			gap: 1rem;
			padding-bottom: 1rem;
		}

		.hero > img,
		.hero > .hero-html {
			object-fit: contain;
			width: min(70%, 20rem);
			height: auto;
			margin-inline: auto;
			filter: invert(1);

			mask-image: radial-gradient(
				circle,
				var(--mask-color-start) 0%,
				var(--mask-color-end) 80%
			);
			mask-repeat: no-repeat;
			mask-position: center;
			mask-size: contain;
		}

		.stack {
			flex-direction: column;
			gap: clamp(1.5rem, calc(1.5rem + 1vw), 2rem);
			text-align: center;
		}

		.copy {
			flex-direction: column;
			gap: 1rem;
			align-items: center;
		}

		.copy > * {
			max-width: 50ch;
		}

		h1 {
			font-size: clamp(
				var(--sl-text-3xl),
				calc(0.25rem + 5vw),
				var(--sl-text-6xl)
			);
			line-height: var(--sl-line-height-headings);
			font-weight: 600;
			color: var(--sl-color-white);
		}

		.tagline {
			font-size: clamp(
				var(--sl-text-base),
				calc(0.0625rem + 2vw),
				var(--sl-text-xl)
			);
			color: var(--sl-color-gray-2);
		}

		.actions {
			gap: 1rem 2rem;
			flex-wrap: wrap;
			justify-content: center;
		}

		@media (min-width: 50rem) {
			.hero {
				grid-template-columns: 7fr 4fr;
				gap: 3%;
				padding-block: clamp(2.5rem, calc(1rem + 10vmin), 10rem);
			}

			.hero > img,
			.hero > .hero-html {
				order: 2;
				width: min(100%, 25rem);
			}

			.stack {
				text-align: start;
			}

			.copy {
				align-items: flex-start;
			}

			.actions {
				justify-content: flex-start;
			}
		}
	}

	.gradient-background {
		position: absolute;
		inset: 0;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: -1;
		overflow: hidden;
		-webkit-mask-image: linear-gradient(
			to bottom,
			var(--ff-bg) 80%,
			transparent 100%
		);
		mask-image: linear-gradient(to bottom, var(--ff-bg) 80%, transparent 100%);
	}

	.grid-overlay {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-size: 40px 40px;
		background-image:
			linear-gradient(to right, var(--border-color) 1px, transparent 1px),
			linear-gradient(to bottom, var(--border-color) 1px, transparent 1px);
		z-index: 2;
	}

	.tabs {
		flex: 1;
	}

	@media screen and (max-width: 768px) {
		.tabs {
			display: none;
		}
	}
</style>
